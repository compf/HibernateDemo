/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HibernateDemo;

import org.junit.jupiter.api.Test;

import HibernateDemo.model.Address;
import HibernateDemo.model.Person;
import HibernateDemo.model.Student;

import static org.junit.jupiter.api.Assertions.*;

import java.time.LocalDate;
import java.util.Calendar;
import java.util.GregorianCalendar;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
/*
 * This class provides some unit tests and show how to save and load data
 * When the respective test is started (gradle test), the database is reset
 * which is useful for switching to another pattern
 */
class AppTest {
   /**
    * saves two person (base person and student) in the databse
    */
    @Test
    void hibernateWorking() {
        Address address1 = new Address("Hauptweg", "49824", "9");
        Address address2 = new Address("Jahnplatz", "49080", "6");
        Person p1 = new Person("Gerda", "Musterfrau", address1,LocalDate.now());
        Person s1 = new Student(978621, "Timo", "Schoemaker", address2,  LocalDate.of(1997, 12, 3));
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("test-test-unit");
        EntityManager em = emf.createEntityManager();
        try {

            var mt = em.getTransaction();
            mt.begin();
            em.persist(p1);
            em.persist(s1);
            em.flush();
            mt.commit();

        } catch (Exception ex) {
            System.out.print(ex);
        } finally {
            em.close();
        }
        testHibernateCount(emf);
        testHibernateSelect(emf, 1, Person.class);
        testHibernateSelect(emf, 2, Student.class);


    }
    /**
     * Count the number of person in the database
     */
    private void testHibernateCount(EntityManagerFactory emf) {
        EntityManager em=null;
        try {

            em = emf.createEntityManager();
            var query = em.createQuery("SELECT p FROM Person p");
            long count = query.getResultList().size();
            assertEquals(2, count);
        } catch (Exception ex) {
            System.out.print(ex);
            assertTrue(false);

        } finally {
            em.close();
        }
    }
    /**
     * Queries for a specific person/student
     * @param emf The entity manager factory 
     * @param qId The id of the person to search for
     * @param personType the class type of the person to search for
     */
    private void testHibernateSelect(EntityManagerFactory emf,int qId,Class<?> personType) {
        EntityManager em=null;
        try {

            em = emf.createEntityManager();
            // create a typed query to get the matching person
            // to avoid SQL injection, parameters are used
            TypedQuery<Person> query = em.createQuery("SELECT p FROM Person p where p.id=:qId ",Person.class).
            setParameter("qId", qId);
            // expecting here only one result
            Person p = query.getSingleResult();
            assertEquals(p.getClass(),personType);
        } catch (Exception ex) {
            System.out.print(ex);
            assertTrue(false);

        } finally {
            em.close();
        }
    }

}
